package cn.com.infosec.netcert.caAdmin.ui.login;

import java.io.File;
import java.io.IOException;
import java.security.Security;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;
import java.util.ResourceBundle;

import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.Separator;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;

import cn.com.infosec.jce.provider.InfosecProvider;
import cn.com.infosec.netcert.caAdmin.ui.admin.AO;
import cn.com.infosec.netcert.caAdmin.test.BA;
import cn.com.infosec.netcert.caAdmin.ui.admin.BO;
import cn.com.infosec.netcert.caAdmin.ui.admin.Panel_VerifyPin;
import cn.com.infosec.netcert.caAdmin.ui.admin.SA_AA;
import cn.com.infosec.netcert.caAdmin.utils.AdminClient;
import cn.com.infosec.netcert.caAdmin.utils.Env;
import cn.com.infosec.netcert.caAdmin.utils.Env.ALG;
import cn.com.infosec.netcert.caAdmin.utils.Utils;
import cn.com.infosec.netcert.framework.ServerException;
import cn.com.infosec.netcert.framework.crypto.CryptoException;
import cn.com.infosec.netcert.framework.crypto.IHSM;
import cn.com.infosec.netcert.framework.crypto.impl.ukey.CertContainer;
import cn.com.infosec.netcert.framework.crypto.impl.ukey.CspCertInfo;
import cn.com.infosec.netcert.framework.crypto.impl.ukey.NeedPinException;
import cn.com.infosec.netcert.framework.crypto.impl.ukey.UsbKeyCSPImpl;
import cn.com.infosec.netcert.framework.crypto.impl.ukey.UsbKeySKFImpl;
import cn.com.infosec.netcert.framework.log.FileLogger;
import cn.com.infosec.netcert.framework.resource.PropertiesKeysRes;
import cn.com.infosec.netcert.framework.transport.chanel.ChannelSign;
import cn.com.infosec.netcert.framework.utils.DNItemReverseUtil;

/**
 * CA Admin 的登录视图
 * @Author 江岩
 * @Time 2019-06-04 19:07
 */
public class Login extends ApplicationWindow {
	private static Login login;
	private AdminClient client;
	private Combo combo_driverName, combo_skf_devSN;
	private ChannelSign chSign;
	private UsbKeySKFImpl skf;
	private CspCertInfo chooseCsp;
	private CertContainer[] cc;
	private CertContainer chooseCert;
	private CspCertInfo[] cspList;
	private String keyDriverName, keyDriverLibPath;

	private Properties pro;
	private FileLogger log = FileLogger.getLogger(this.getClass());
	private static ResourceBundle l = Env.getLanguage();

	/**
	 * 构造方法
	 */
	public Login() {
		super(null);
		try {
			Env.initCAConfig();
			if(Env.alg == ALG.SM2) {
				File f = new File(Env.keyConfigFile);
				if(!f.exists()) {
					f.createNewFile();
				}
				pro = Env.getProperties(f);
			}
		} catch (IOException e) {
			log.errlog("keyConfigFile load fail.", e);
			Panel_Dialog.messageDialog("error", e.getMessage());
			return;
		} catch (Exception e) {
			log.errlog("Init Admin config fail.", e);
			Panel_Dialog.messageDialog("error", e.getMessage());
			return;
		}
		addToolBar(SWT.FLAT | SWT.WRAP);
		addMenuBar();
	}

	/**
	 * 视图页面绘画
	 * @Author 江岩
	 * @Time 2019-06-04 19:21
	 * @version 1.0
	 */
	@Override
	protected Control createContents(Composite parent) {
		Composite container = new Composite(parent, SWT.NONE);
		GridLayout gridLayout = new GridLayout(2, false);
		gridLayout.marginTop = 25;
		gridLayout.marginLeft = 10;
		gridLayout.marginRight = 60;
		gridLayout.verticalSpacing = 15;
		container.setLayout(gridLayout);

		Label lblUsbkey = new Label(container, SWT.NONE);
		GridData gd_lblUsbkey = new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1);
		gd_lblUsbkey.widthHint = 89;
		lblUsbkey.setLayoutData(gd_lblUsbkey);
		lblUsbkey.setAlignment(SWT.RIGHT);
		lblUsbkey.setText(l.getString("driverName") + ":");
		
		combo_driverName = new Combo(container, SWT.NONE | SWT.READ_ONLY);
		GridData gd_combo_dev = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_combo_dev.widthHint = 180;
		combo_driverName.setLayoutData(gd_combo_dev);

		if (ALG.SM2 == Env.alg) { // dev名称 dev_SN
			@SuppressWarnings("unchecked")
			Enumeration<String> keyList = (Enumeration<String>) pro.propertyNames();
			while (keyList.hasMoreElements()) {
				combo_driverName.add(keyList.nextElement());
			}
			if (combo_driverName.getItemCount() != 0) {
				combo_driverName.select(0);
				keyDriverLibPath = pro.getProperty(combo_driverName.getText().trim());
			}

			Label lblSN = new Label(container, SWT.NONE);
			GridData gd_lblSN = new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1);
			gd_lblSN.widthHint = 86;
			lblSN.setLayoutData(gd_lblSN);
			lblSN.setAlignment(SWT.RIGHT);
			lblSN.setText(l.getString("SN") + ":");

			combo_skf_devSN = new Combo(container, SWT.NONE | SWT.READ_ONLY);
			GridData gd_combo_devSN = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
			gd_combo_devSN.widthHint = 180;
			combo_skf_devSN.setLayoutData(gd_combo_devSN);

			combo_driverName.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent arg0) {
					combo_skf_devSN.removeAll();
					keyDriverLibPath = pro.getProperty(combo_driverName.getText());
					try {
						String[] devItems = UsbKeySKFImpl.enumDev(keyDriverLibPath);
						for (String s : devItems) {
							combo_skf_devSN.add(s);
						}
						if (devItems.length != 0) {
							combo_skf_devSN.select(0);
						}
					} catch (CryptoException e) {
						log.errlog("enumDev fail", e);
						MessageBox mb = new MessageBox(getShell(), SWT.ERROR);
						mb.setMessage(l.getString("Notice_fail_enumDev"));
						mb.open();
					}
				}
			});
		} else {
			String[] pro = UsbKeyCSPImpl.listProvider();
			for (String s : pro) {
				combo_driverName.add(s);
			}
			if (pro.length != 0) {
				combo_driverName.select(0);
			}
		}
		new Label(container, SWT.NONE);
		Button btn_login = new Button(container, SWT.NONE);
		GridData gd_btn_login = new GridData(SWT.CENTER, SWT.CENTER, false, false, 1, 1);
		gd_btn_login.widthHint = 61;
		btn_login.setLayoutData(gd_btn_login);
		btn_login.setText(l.getString("login"));

		btn_login.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (!Env.isInited()) {
					MessageBox mb = new MessageBox(getShell());
					mb.setMessage(l.getString("Notice_not_initAdmin"));
					mb.open();
					return;
				}
				if (ALG.SM2 == Env.alg
						&& (combo_skf_devSN.getText().trim() == null || combo_skf_devSN.getText().length() == 0)) {
					MessageBox mb = new MessageBox(getShell());
					mb.setMessage(l.getString("Notice_null_SN"));
					mb.open();
					return;
				}
				if (ALG.SM2 == Env.alg) {
					try {
						keyDriverLibPath = pro.getProperty(combo_driverName.getText().trim());
						skf = new UsbKeySKFImpl(keyDriverLibPath, combo_skf_devSN.getText().trim());
						Env.getMap().put(pro.getProperty(combo_driverName.getText()) + combo_skf_devSN.getText().trim(),
								skf);
					} catch (CryptoException ee) {
						log.errlog("new SKF fail", ee);
						MessageBox mb = new MessageBox(getShell(), SWT.ERROR);
						mb.setMessage(l.getString("Notice_fail_newSKF"));
						mb.open();
						return;
					}
					try {
						try {
							cc = skf.enumCert(IHSM.SIGN);
						} catch (NeedPinException ee) {
							Panel_VerifyPin verifyPin = new Panel_VerifyPin();
							verifyPin.setBlockOnOpen(true);
							int w = verifyPin.open();
							if (w != 0) {
								return;
							} else {
								int result = skf.verifyPIN(verifyPin.pin);
								if (result == 0) {
									cc = skf.enumCert(IHSM.SIGN);
								} else {
									MessageBox mb = new MessageBox(getShell());
									mb.setMessage(l.getString("Notice_error_PIN"));
									mb.open();
									return;
								}
							}
						}
						CertContainer[] skfs = getMatchIssuerSM2Cert(cc);
						if (skfs.length == 0) {
							MessageBox mb = new MessageBox(getShell(), SWT.ERROR);
							mb.setMessage(l.getString("Notice_not_foundIssuerCert"));
							mb.open();
							return;
						} else if (skfs.length == 1) {
							chooseCert = skfs[0];
						} else {
							Panel_ChooseCert choose = new Panel_ChooseCert(cc);
							choose.setBlockOnOpen(true);
							int w = choose.open();
							if (w == 0) { // 右上角关闭(正常关闭)返回值 为1 close() 关闭返回值
								chooseCert = choose.chooseCert;
							} else {
								return;
							}
						}
					} catch (CryptoException ee) {
						log.errlog("Enum Cert fail", ee);
						MessageBox mb = new MessageBox(getShell(), SWT.ERROR);
						mb.setMessage(l.getString("Notice_fail_enumCert"));
						mb.open();
						return;
					}
					String keyIdx = combo_skf_devSN.getText().trim() + Utils.NameConnector
							+ chooseCert.getContainerName();
					chSign = new ChannelSign(keyDriverLibPath, keyIdx, null, IHSM.SM3withSM2, chooseCert.getCert());
				} else { // RSA
					keyDriverName = combo_driverName.getText().trim();
					cspList = new UsbKeyCSPImpl(keyDriverName).listCert(IHSM.SIGN);
					CspCertInfo[] csps = getMatchIssuerRSACert(cspList);
					if (csps.length == 0) {
						MessageBox mb = new MessageBox(getShell(), SWT.ERROR);
						mb.setMessage(l.getString("Notice_not_foundIssuerCert"));
						mb.open();
						return;
					} else if (csps.length == 1) {
						chooseCsp = csps[0];
					} else {
						Panel_ChooseCert choose = new Panel_ChooseCert(csps);
						choose.setBlockOnOpen(true);
						int w = choose.open();
						if (w == 0) { // 右上角关闭(正常关闭)返回值 为1 close() 关闭返回值
							chooseCsp = choose.chooseCsp;
						} else {
							return;
						}
					}
					String keyIdx = chooseCsp.sn + Utils.NameConnector + chooseCsp.container;
					chSign = new ChannelSign(keyDriverName, keyIdx, null, IHSM.SHA1withRSA, null);
				}
				try {
					client = Env.getClient(chSign);
					Properties p = new Properties();
					Properties resp = client.sendRequest("LOGIN", p).getP();

					String user_manageByCA = resp.getProperty("IS_USER_AUTH_BY_CA", "true");
					Env.set_IS_USER_AUTH_BY_CA(user_manageByCA); // 设置是否为 CA 管理用户

					Env.client = client;// 设置登录管理员的带签名的通讯方式
					close();

					String role = resp.getProperty(PropertiesKeysRes.ADMIN_ROLE);
					Env.lastOperationTime(); // 登录时，初始化当前时间
					if ("SA".equalsIgnoreCase(role) || "AA".equalsIgnoreCase(role)) {
						SA_AA sa = new SA_AA(role);
						sa.setBlockOnOpen(true);
						sa.open();
					} else if ("BA".equalsIgnoreCase(role)) {
						BA ba = new BA();
						ba.setBlockOnOpen(true);
						ba.open();
					} else if ("BO".equalsIgnoreCase(role)) {
						BO bo = new BO(resp.getProperty(PropertiesKeysRes.ADMIN_BO_POWERS));
						bo.setBlockOnOpen(true);
						bo.open();
					} else if ("AO".equalsIgnoreCase(role)) {
						AO ao = new AO();
						ao.setBlockOnOpen(true);
						ao.open();
					}
					release();
				} catch (CryptoException ce) {
					log.errlog("sign fail", ce);
					MessageBox mb = new MessageBox(getShell(), SWT.ERROR);
					mb.setMessage(l.getString("Notice_fail_sign"));
					mb.open();
					return;
				} catch (ServerException se) {
					log.errlog("login fail", se);
					MessageBox mb = new MessageBox(getShell(), SWT.ERROR);
					mb.setMessage(
							l.getString("Notice_fail_login") + ":" + "[" + se.getErrorNum() + "]:" + se.getErrorMsg());
					mb.open();
					return;
				} catch (Exception ee) {
					log.errlog("login fail.", ee);
					MessageBox mb = new MessageBox(getShell(), SWT.ERROR);
					mb.setMessage(l.getString("Notice_fail_login"));
					mb.open();
					return;
				}
			}
		});
		getShell().setDefaultButton(btn_login);
		return container;
	}

	// 匹配 根证书颁发的 SM2 的证书
	private CertContainer[] getMatchIssuerSM2Cert(CertContainer[] cc) {
		List<CertContainer> matchSKFList = new ArrayList<CertContainer>();
		for (int i = 0; i < cc.length; i++) {
			if (isIssuerMatch(cc[i].getCert().getIssuerDN().getName())) {
				matchSKFList.add(cc[i]);
			}
		}
		CertContainer[] matchCSPs = new CertContainer[matchSKFList.size()];
		for (int i = 0; i < matchSKFList.size(); i++) {
			matchCSPs[i] = matchSKFList.get(i);
		}
		return matchCSPs;
	}

	// 匹配 根证书颁发的 RSA 的证书
	private CspCertInfo[] getMatchIssuerRSACert(CspCertInfo[] cspList) {
		List<CspCertInfo> matchCSPList = new ArrayList<CspCertInfo>();
		for (int i = 0; i < cspList.length; i++) {
			if (isIssuerMatch(cspList[i].issuer)) {
				matchCSPList.add(cspList[i]);
			}
		}
		CspCertInfo[] matchCSPs = new CspCertInfo[matchCSPList.size()];
		for (int i = 0; i < matchCSPList.size(); i++) {
			matchCSPs[i] = matchCSPList.get(i);
		}
		return matchCSPs;
	}

	// 证书 DN 匹配 issuerDN
	private boolean isIssuerMatch(String userDN) {
		try {
			String dn = DNItemReverseUtil.bigEnding(userDN);
			return DNItemReverseUtil.bigEnding(Env.issuerDN).equalsIgnoreCase(dn);
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * 创建菜单栏
	 * @Author 江岩
	 * @Time 2019-06-04 19:16
	 * @version 1.0
	 */
	@Override
	protected MenuManager createMenuManager() {
		MenuManager mm = new MenuManager();
		MenuManager menu = new MenuManager(l.getString("menu"));
		menu.add(new ConfigAction());
		if (ALG.SM2 == Env.alg) {
			menu.add(new KeyLibConfig());
		}
		menu.add(new AdminDownCertAction());
		Separator separator = new Separator();
		separator.setVisible(true);
		menu.add(separator);
		menu.add(new ExitAction());
		mm.add(menu);
		MenuManager about = new MenuManager(l.getString("about"));
		String version = Login.class.getPackage().getImplementationVersion();
		about.add(new Action(l.getString("version") + ":" + version) {
		});
		mm.add(about);
		return mm;
	}

	/**
	 * 菜单中配置CA信息
	 * @Author 江岩
	 * @Time 2019-06-04 19:17
	 * @version 1.0
	 */
	private class ConfigAction extends Action {
		public ConfigAction() {
			setText(l.getString("AdminConfig"));
		}

		public void run() {
			Panel_Config pc = new Panel_Config();
			pc.setBlockOnOpen(true);
			int w = pc.open();
			if(w == 0) {
				refreshLogin();
			}
		}
	}

	/**
	 * 菜单中usbkey配置
	 * @Author 江岩
	 * @Time 2019-06-04 19:17
	 * @version 1.0
	 */
	private class KeyLibConfig extends Action {
		public KeyLibConfig() {
			setText(l.getString("keyDriverNameConfig"));
		}

		public void run() {
			Panel_KeyLibConfig pc = new Panel_KeyLibConfig();
			pc.setBlockOnOpen(true);
			pc.open();
			refreshLogin();
		}
	}

	/**
	 * 菜单中管理员证书下载按钮
	 * @Author 江岩
	 * @Time 2019-06-04 19:18
	 * @version 1.0
	 */
	private class AdminDownCertAction extends Action {
		public AdminDownCertAction() {
			setText(l.getString("downloadAdminCert"));
		}

		public void run() {
			if (Env.isInited()) {
				Panel_DownloadAdminCert panel_AdminDownCert = new Panel_DownloadAdminCert();
				panel_AdminDownCert.setBlockOnOpen(true);
				panel_AdminDownCert.open();
			} else {
				MessageBox mb = new MessageBox(getShell());
				mb.setMessage(l.getString("Notice_not_initAdmin"));
				mb.open();
			}
		}
	}

	/**
	 * 菜单中退出窗口功能
	 * @Author 江岩
	 * @Time 2019-06-04 19:18
	 * @version 1.0
	 */
	private class ExitAction extends Action {
		public ExitAction() {
			setText(l.getString("exit"));
		}

		public void run() {
			handleShellCloseEvent();
		}
	}

	/**
	 * 设置当前视图的标题栏
	 * @Author 江岩
	 * @Time 2019-06-04 19:19
	 * @version 1.0
	 */
	@Override
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Infosec CAAdmin");
		shell.setImage(new Image(shell.getDisplay(), "res/logo.png"));
	}

	/**
	 * 应用程序入口方法
	 * @Author 江岩
	 * @Time 2019-06-04 19:10
	 * @version 1.0
	 */
	public static void main(String args[]) {
		Security.addProvider(new InfosecProvider());
		login = new Login();
		login.setBlockOnOpen(true);
		login.open();
		Display.getCurrent().dispose();
	}
	/**
	 * 重写窗口关闭事件
	 * @Author 江岩
	 * @Time 2019-06-04 19:20
	 * @version 1.0
	 */
	@Override
	public void handleShellCloseEvent() {
		MessageBox messagebox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);
		messagebox.setMessage(l.getString("Notice_exit") + "?");
		int closeCode = messagebox.open();
		if (closeCode == SWT.YES) {
			MessageBox mb = new MessageBox(getShell(), SWT.ICON_INFORMATION);
			mb.setMessage(l.getString("Notice_removeCert"));
			mb.open();
			release();
			super.handleShellCloseEvent();
		}
	}
	/**
	 * 修改系统配置，刷新窗口：重启实现
	 * @Author 江岩 
	 * @Time   2019-08-14 13:41
	 * @version 1.0
	 */
	private void refreshLogin() {
		super.handleShellCloseEvent();
		login = new Login();
		login.setBlockOnOpen(true);
		login.open();
	}
	/**
	 * 释放 占用资源
	 * @Author 江岩
	 * @Time 2019-06-10 10:26
	 * @version 1.0
	 */
	public void release() {
		if(client != null) {
			client.close();
		}
		if (ALG.SM2 == Env.alg) {
			Collection<UsbKeySKFImpl> skfs = Env.getMap().values();
			for (UsbKeySKFImpl skf : skfs) {
				skf.release();
			}
		} else {
			UsbKeyCSPImpl.free();
		}
	}
}
