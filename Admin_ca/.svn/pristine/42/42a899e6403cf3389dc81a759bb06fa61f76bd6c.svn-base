package cn.com.infosec.netcert.caAdmin.utils;

import java.security.cert.Certificate;
import java.util.Collection;
import java.util.Iterator;
import java.util.Properties;
import java.util.Random;
import java.util.ResourceBundle;

import cn.com.infosec.netcert.caAdmin.ui.admin.Panel_VerifyPin;
import cn.com.infosec.netcert.caAdmin.utils.Env.ALG;
import cn.com.infosec.netcert.framework.Request;
import cn.com.infosec.netcert.framework.Response;
import cn.com.infosec.netcert.framework.ServerException;
import cn.com.infosec.netcert.framework.crypto.CryptoException;
import cn.com.infosec.netcert.framework.crypto.IHSM;
import cn.com.infosec.netcert.framework.crypto.SM2Id;
import cn.com.infosec.netcert.framework.crypto.impl.SoftCryptoAndStore;
import cn.com.infosec.netcert.framework.crypto.impl.ukey.NeedPinException;
import cn.com.infosec.netcert.framework.crypto.impl.ukey.UsbKeyCSPImpl;
import cn.com.infosec.netcert.framework.crypto.impl.ukey.UsbKeySKFImpl;
import cn.com.infosec.netcert.framework.log.FileLogger;
import cn.com.infosec.netcert.framework.protocol.IProtocol;
import cn.com.infosec.netcert.framework.protocol.Protocol;
import cn.com.infosec.netcert.framework.resource.PropertiesKeysRes;
import cn.com.infosec.netcert.framework.transport.Sender;
import cn.com.infosec.netcert.framework.transport.chanel.ChannelConf;
import cn.com.infosec.netcert.framework.transport.chanel.ChannelSecure;
import cn.com.infosec.netcert.framework.transport.chanel.ChannelSign;

/**
 * ca_admin 的通信工具
 * @Author 江岩    
 * @Time 2019-06-04 21:02
 */
public class AdminClient {
	public Certificate signCert; // 签名证书
	
	private IHSM hsm;
	private Sender sender;

	private boolean isAnonymous; // true-匿名,发送请求报文不签名; false-发送请求报文签名
	private String keyIdx, signAlgName; // 签名密钥标识，签名算法
	private String channelName = "ADMIN", protocolName, localIp;
	
	FileLogger log = FileLogger.getLogger(AdminClient.class);
	private static ResourceBundle l = Env.getLanguage();
	/**
	 * 请求客户端
	 * 
	 * @param channelName
	 *            通道名称
	 * @param chSign
	 *            请求签名配置
	 * @param chSecure
	 *            通讯安全配置
	 * @param chConf
	 *            通讯基本设置，ip、端口等
	 * @throws Exception
	 */
	public AdminClient(ChannelSign chSign, ChannelSecure chSecure, String protocolName, ChannelConf chConf)
			throws Exception {
		this.protocolName = protocolName;
		this.localIp = chConf.getLocalIp();
		this.sender = new Sender(chConf, chSecure);
		if (chSign != null) { 
			if (ALG.SM2 == Env.alg) {
				String skf_sn = chSign.getKeyIdx().split(Utils.NameConnector)[0];
				this.hsm = new UsbKeySKFImpl(chSign.getHsm(), skf_sn);
			} else {
				this.hsm = new UsbKeyCSPImpl(chSign.getHsm());
			}
			this.keyIdx = chSign.getKeyIdx();
			this.signAlgName = chSign.getSignAlgName();
			this.signCert = chSign.getSignCert();

			this.isAnonymous = false;
		} else {
			this.isAnonymous = true;
		}
	}

	/**
	 * 发送请求到服务器     
	 * @Description  发送type值 和 Properties 到服务器，服务器根据type 调用相对的 处理方法
	 * @param      (String,Properties)
	 * @return     (Response)   
	 * @throws     (Exception)
	 * @Author 江岩 
	 * @Time   2019-06-04 21:03
	 * @version 1.0
	 * @throws Exception 
	 */
	public Response sendRequest(String type, Properties p) throws Exception {
		Request req = new Request(type);
		req.setHeader(PropertiesKeysRes.VERSION, "0");
		req.setHeader(PropertiesKeysRes.LOCALTIME, String.valueOf(System.currentTimeMillis()));
		req.setHeader(PropertiesKeysRes.TASKTAG, String.valueOf(new Random().nextInt(100000)));

		if (p != null) {
			Collection<Object> pList = p.keySet();
			Iterator<Object> pIter = pList.iterator();
			while (pIter.hasNext()) {
				String name = (String) pIter.next();
				req.setValue(name, p.getProperty(name, ""));
			}
		}
		IProtocol protocol = Protocol.getInst(this.protocolName);

		// 注入协议实现类
		req.setProtocol(protocol);

		// 如果客户端指定了本地ip，则插入header
		if (this.localIp != null && this.localIp.length() > 0) {
			req.setHeader(PropertiesKeysRes.X_CLIENT_IP, this.localIp);
		}
		if (!this.isAnonymous) {
			byte[] sign = null;
			String sn = keyIdx.split(Utils.NameConnector)[0];
			String containerName = keyIdx.split(Utils.NameConnector)[1];

			// 获取签名原文
			if (ALG.SM2 == Env.alg) {
				//sn = ((X509Certificate) this.signCert).getSerialNumber().toString(16);
				req.setSignCert(this.signCert);
				//req.setHeader(PropertiesKeysRes.ID, sn);
				byte[] source = req.getSignSource();
				String sm2id_sign = SM2Id.getSignId(channelName);
				byte[] hash = SoftCryptoAndStore.SM3WithId(source, sm2id_sign.getBytes(), signCert.getPublicKey());
				// 请求内容签名
				try {
					sign = hsm.sign(containerName, 0, null, hash, signAlgName, sm2id_sign);
				} catch (NeedPinException ee) {
					Panel_VerifyPin verifyPin = new Panel_VerifyPin();
					verifyPin.setBlockOnOpen(true);
					int w = verifyPin.open();
					if (w == 0) { // 按钮调用close()关闭，并保留对象
						UsbKeySKFImpl skf = (UsbKeySKFImpl) this.hsm;
						int result = skf.verifyPIN(verifyPin.pin);
						if (result == 0) {
							sign = hsm.sign(containerName, 0, null, hash, signAlgName, sm2id_sign);					
						} else {
							throw new Exception(l.getString("Notice_error_PIN"));
						}
					} else {
						throw new Exception(l.getString("Notice_null_PIN"));
					}
				}
			}
			if (ALG.RSA == Env.alg) {
				req.setHeader(PropertiesKeysRes.ID, sn);
				byte[] source = req.getSignSource();
				sign = hsm.sign(containerName, 0, null, source, signAlgName, null); 
			}
			req.setSignature(sign);
			req.setSignAlg(signAlgName);
		}
		
		// 得到待传输的内容
		byte[] b = req.getEncoded();
		// 发送请求数据到服务器，得到 响应数据
		byte[] r = this.sender.send(b);

		Response resp = protocol.parseResponse(r);
		resp.setProtocol(protocol);

		String errorNum = resp.getHeader(PropertiesKeysRes.ERRORNUM);
		if (errorNum.equals("0")) {
			return resp;
		} else {
			throw new ServerException(errorNum, resp.getHeader(PropertiesKeysRes.ERRORMSG));
		}
	}

	/** 
	 * @Description  生成 sign，使用证书做签名,审计验证签名使用
	 * @param      (byte[])
	 * @return     (byte[])  
	 * @throws     (Exception)
	 * @Author 江岩 
	 * @Time   2019-06-04 21:03
	 * @version 1.0
	 * @throws CryptoException 
	 */
	public byte[] genSign(byte[] source) throws CryptoException {
		byte[] sign = null;
		String container = keyIdx.split(Utils.NameConnector)[1];
		if (ALG.SM2 == Env.alg) {
			String sm2id_sign = SM2Id.getSignId(this.channelName);
			byte[] hash = SoftCryptoAndStore.SM3WithId(source, sm2id_sign.getBytes(), signCert.getPublicKey());
			sign = this.hsm.sign(container, 0, null, hash, IHSM.SM3withSM2, sm2id_sign);
		}
		if (ALG.RSA == Env.alg) {
			sign = this.hsm.sign(container, 0, null, source, IHSM.SHA1withRSA, null);
		}
		return sign;
	}

	/**
	 * 获取 当前使用的算法，只有 SM3withSM2  SHA1withRSA 两种
	 * @Author 江岩 
	 * @Time   2019-07-12 15:53
	 * @version 1.0
	 */
	public String getSignAlg() {
		return this.signAlgName;
	}
	/**
	 * 断开连接，否则关闭 窗口时，不能真正的关闭应用
	 * @Author 江岩 
	 * @Time   2019-08-09 13:37
	 * @version 1.0
	 */
	public void close(){
		this.sender.close();
	}
}
